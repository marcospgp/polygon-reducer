# Style and formatting rules for C#.
#
# Ensure this file is processed by enabling Omnisharp editor config support in
# VSCode preferences:
# "omnisharp.enableEditorConfigSupport": true
# You can also set this option through the Settings GUI. It should already be
# enabled by default.
#
# In Visual Studio 2019 and later versions (on Windows), you can generate this
# file and save it to a project at Tools > Options > Text Editor > C#
# > Code Style > General. Then, click the Generate .editorconfig file from
# settings button.
#
# This auto generated file was not applying style rules correctly, however, so
# some additional rules were copied from the template available at
# https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig. A diff
# between the rules included in the auto generated file (left) and the Github
# template (right) is available at
# https://linediff.com/?id=60febaff687f4bba2a8b4567.

# Remove the line below if you want to inherit .editorconfig settings from
# higher directories
root = true

#
#
#
#
# Overrides
#
#
#
#

# All files
[*]

# IDE0002: Simplify member access
# Allow including class name when calling static class members
dotnet_diagnostic.IDE0002.severity = none

# IDE0004: Remove unnecessary cast
# We want to be explicit about conversions.
dotnet_diagnostic.IDE0004.severity = none

# IDE0021: Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = none

# IDE0045: Use conditional expression for assignment
# We don't want to be forced to use ternary operator for assignments.
dotnet_diagnostic.IDE0045.severity = none

# IDE0083: Use pattern matching (not operator)
# (Only available in C# 9.0+)
dotnet_diagnostic.IDE0083.severity = none

# IDE0090: Simplify new expression
# (only available starting with C# 9.0, Unity currently supports 8.0)
# https://docs.unity3d.com/Manual/CSharpCompiler.html
dotnet_diagnostic.IDE0090.severity = none

# SA1633FileMustHaveHeader: The file header is missing or not located at the
# top of the file.
# dotnet_diagnostic.SA1633.severity = none

# SA1600ElementsMustBeDocumented
# dotnet_diagnostic.SA1600.severity = none

# SA1500: Braces for multi-line statements should not share line
# dotnet_diagnostic.SA1500.severity = none

# Make field readonly (IDE0044)
# (conflicts with using [SerializeField] on private fields to modify them
# through the Unity inspector)
# dotnet_diagnostic.IDE0044.severity = none

# Use throw expression (IDE0016)
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0016
# Can't use ?? with Unity due to custom equality operator implementation
# dotnet_diagnostic.IDE0016.severity = none

# Roslynator
# https://github.com/JosefPihrt/Roslynator
#
# List of roslynator analyzers configurable in .editorconfig here:
# https://github.com/JosefPihrt/Roslynator/issues/473#issuecomment-889331342
#
# Note it's still possible to set the severity of any analyzer using
# "dotnet_diagnostic.RCSxxxx.severity".

roslynator.max_line_length=80

# Add newline after expression-body arrow instead of before it
roslynator.RCS0032.invert = true
# Remove newline between closing brace and 'while' keyword
roslynator.RCS0051.invert = true
# Add newline after equals sign instead of before it
roslynator.RCS0052.invert = true


# Roslynator formatting rules (RCS0xxx) are disabled by default.
# http://pihrt.net/Roslynator/Analyzers?Query=RCS0
dotnet_diagnostic.RCS0001.severity = warning
dotnet_diagnostic.RCS0002.severity = warning
dotnet_diagnostic.RCS0003.severity = warning
# RCS0004: Add empty line before closing brace of 'do' statement
dotnet_diagnostic.RCS0004.severity = none
dotnet_diagnostic.RCS0005.severity = warning
dotnet_diagnostic.RCS0006.severity = warning
dotnet_diagnostic.RCS0007.severity = warning
dotnet_diagnostic.RCS0008.severity = warning
dotnet_diagnostic.RCS0009.severity = warning
# RCS0010: Add empty line between declarations
dotnet_diagnostic.RCS0010.severity = none
# RCS0011: Add empty line between single-line accessors (or vice versa)
dotnet_diagnostic.RCS0011.severity = none
# RCS0012: Add empty line between single-line declarations.
dotnet_diagnostic.RCS0012.severity = none
dotnet_diagnostic.RCS0013.severity = warning
# RCS0014: Add empty line between switch sections.
dotnet_diagnostic.RCS0014.severity = none
# RCS0015: Add empty line between using directives.
dotnet_diagnostic.RCS0015.severity = none
dotnet_diagnostic.RCS0016.severity = warning
dotnet_diagnostic.RCS0020.severity = warning
dotnet_diagnostic.RCS0021.severity = warning
dotnet_diagnostic.RCS0022.severity = warning
dotnet_diagnostic.RCS0023.severity = warning
dotnet_diagnostic.RCS0024.severity = warning
dotnet_diagnostic.RCS0025.severity = warning
# RCS0027: Add newline before binary operator instead of after it.
dotnet_diagnostic.RCS0027.severity = none
# RCS0028: Add newline before conditional operator instead of after it.
dotnet_diagnostic.RCS0028.severity = none
# RCS0029: Add newline before constructor initializer.
dotnet_diagnostic.RCS0029.severity = none
dotnet_diagnostic.RCS0030.severity = warning
dotnet_diagnostic.RCS0031.severity = warning
dotnet_diagnostic.RCS0032.severity = warning
dotnet_diagnostic.RCS0033.severity = warning
dotnet_diagnostic.RCS0034.severity = warning
# RCS0036: Remove empty line between single-line declarations of same kind.
dotnet_diagnostic.RCS0036.severity = none
dotnet_diagnostic.RCS0038.severity = warning
dotnet_diagnostic.RCS0039.severity = warning
dotnet_diagnostic.RCS0041.severity = warning
dotnet_diagnostic.RCS0042.severity = warning
# RCS0044: Use carriage return + linefeed as newline
# Disable line ending rules. Git should handle line ending conversion.
dotnet_diagnostic.RCS0044.severity = none
# RCS0045: Use linefeed as newline
dotnet_diagnostic.RCS0045.severity = none
dotnet_diagnostic.RCS0046.severity = warning
dotnet_diagnostic.RCS0047.severity = warning
# RCS0048: Remove newlines from initializer with single-line expression
# Disabled, makes lines too long and doesn't seem to help with anything.
dotnet_diagnostic.RCS0048.severity = none
dotnet_diagnostic.RCS0049.severity = warning
dotnet_diagnostic.RCS0050.severity = warning
dotnet_diagnostic.RCS0051.severity = warning
dotnet_diagnostic.RCS0052.severity = warning
# RCS0053: Fix formatting of a list
# Made it impossible to format a long line without hitting line length limit.
dotnet_diagnostic.RCS0053.severity = none
# RCS0054: Fix formatting of a call chain.
# Wasn't working well.
dotnet_diagnostic.RCS0054.severity = none
# RCS0055: Fix formatting of a binary expression chain.
# Disabled because it forces parenthesis to be on the same line as boolean
# expression even when multiline.
dotnet_diagnostic.RCS0055.severity = none
dotnet_diagnostic.RCS0056.severity = warning

# Roslynator code analysis rules (RCS1xxx) are enabled by default.
#
# RCS1124: Inline local variable
# Disabling this rule allows assigning a variable before iterating over it,
# avoiding extensive loop declarations.
dotnet_diagnostic.RCS1124.severity = none
# RCS1129: Remove redundant field initialization
# We want to be explicit.
dotnet_diagnostic.RCS1129.severity = none
# RCS1146: Use conditional access
# Unity overrides null equality check so we can't use conditional operators.
dotnet_diagnostic.RCS1146.severity = none
# RCS1161: Enum should declare explicit values
dotnet_diagnostic.RCS1161.severity = none
# RCS1169: Make field read-only.
# Overlaps with IDE0044, and unlike it, does not get suppressed when
# [SerializeField] is added.
dotnet_diagnostic.RCS1169.severity = none
# RCS1180: Inline lazy initialization
dotnet_diagnostic.RCS1180.severity = none
# RCS1181: Convert comment to documentation comment.
dotnet_diagnostic.RCS1181.severity = none

#
#
#
#
# Github template rules below
#
#
#
#

######################################################################
# License for rules copied from                                      #
# https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig #
######################################################################
# The following applies as to the .editorconfig file ONLY, and is
# included below for reference, per the requirements of the license
# corresponding to this .editorconfig file.
# See: https://github.com/RehanSaeed/EditorConfig
#
# MIT License
#
# Copyright (c) 2017-2019 Muhammad Rehan Saeed
# Copyright (c) 2019 Henry Gabryjelski
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
##########################################

[*]
charset = utf-8

##########################################
# Default .NET Code Style Severities
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope
##########################################

[*.{cs,csx,cake,vb,vbx}]
# Default Severity for all .NET Code Style rules below
dotnet_analyzer_diagnostic.severity = warning
dotnet_code_quality.api_surface = all

##########################################
# .NET Naming Rules
# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/naming-rules
##########################################

[*.{cs,csx,cake,vb,vbx}]

##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

##########################################
# .NET Design Guideline Field Naming Rules
# Naming rules for fields follow the .NET Framework design guidelines
# https://docs.microsoft.com/dotnet/standard/design-guidelines/index
##########################################

# All public/protected/protected_internal constant fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
# Disabled - prefer stylecop rule below
# dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
# dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
# dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = error

# All public/protected/protected_internal static readonly fields must be ~PascalCase~ UPPER_SNAKE case
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = upper_snake
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
# Edit: Removed because wanted to have public readonly fields in struct.
# dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
# dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
# dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# Commented out: using style rules in auto generated section instead.
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
# dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
# dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
# dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning

# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
# dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
# dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = error

# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = warning

# Removed: conflicts with const fields being upper snake case
# (const_upper_snake)
# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
# dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
# dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
# dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
# dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style
# dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = error

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = warning

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error

#
#
#
#
# Auto generated .editorconfig from Visual Studio 2019 below
#
#
#
#

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
#
# Why choose tabs over spaces:
# https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/
indent_size = 4
# Edit: issue with `indent_style = tab`. change back when this is resolved:
# https://github.com/dotnet/roslyn/issues/46243
indent_style = space
tab_width = 4

# New line preferences
# end_of_line = crlf
insert_final_newline = true

#### .NET Coding Conventions ####

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = true:warning
dotnet_style_qualification_for_field = true:warning
dotnet_style_qualification_for_method = true:warning
dotnet_style_qualification_for_property = true:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_namespace_match_folder = true
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = end_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = false:none
dotnet_style_prefer_inferred_anonymous_type_member_names = false:warning
dotnet_style_prefer_inferred_tuple_names = false:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_constructors = true:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = true:warning
csharp_style_expression_bodied_methods = when_on_single_line:warning
csharp_style_expression_bodied_operators = true:warning
csharp_style_expression_bodied_properties = true:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = false:warning
csharp_style_prefer_switch_expression = true:warning

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async

# Code-block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:warning

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = false:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:warning

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:warning
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = true:warning

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = false
csharp_new_line_before_else = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = none
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = no_change
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

#### Naming styles ####

# Naming rules

dotnet_naming_rule.class_should_be_pascal_case.severity = warning
dotnet_naming_rule.class_should_be_pascal_case.symbols = class
dotnet_naming_rule.class_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.struct_should_be_pascal_case.severity = warning
dotnet_naming_rule.struct_should_be_pascal_case.symbols = struct
dotnet_naming_rule.struct_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.enum_should_be_pascal_case.severity = warning
dotnet_naming_rule.enum_should_be_pascal_case.symbols = enum
dotnet_naming_rule.enum_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.delegate_should_be_pascal_case.severity = warning
dotnet_naming_rule.delegate_should_be_pascal_case.symbols = delegate
dotnet_naming_rule.delegate_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.method_should_be_pascal_case.severity = warning
dotnet_naming_rule.method_should_be_pascal_case.symbols = method
dotnet_naming_rule.method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.private_method_should_be_pascal_case.severity = warning
dotnet_naming_rule.private_method_should_be_pascal_case.symbols = private_method
dotnet_naming_rule.private_method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.abstract_method_should_be_pascal_case.severity = warning
dotnet_naming_rule.abstract_method_should_be_pascal_case.symbols = abstract_method
dotnet_naming_rule.abstract_method_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.static_method_should_be_pascal_case.severity = warning
dotnet_naming_rule.static_method_should_be_pascal_case.symbols = static_method
dotnet_naming_rule.static_method_should_be_pascal_case.style = pascal_case

# Edit: changed to camel_case to align with Unity conventions
dotnet_naming_rule.property_should_be_pascal_case.severity = warning
dotnet_naming_rule.property_should_be_pascal_case.symbols = property
dotnet_naming_rule.property_should_be_pascal_case.style = camel_case

# Edit: changed from pascal case to camel case
dotnet_naming_rule.public_or_protected_field_should_be_camel_case.severity = warning
dotnet_naming_rule.public_or_protected_field_should_be_camel_case.symbols = public_or_protected_field
dotnet_naming_rule.public_or_protected_field_should_be_camel_case.style = camel_case

# Edit: changed from pascal case to camel case
dotnet_naming_rule.static_field_should_be_camel_case.severity = warning
dotnet_naming_rule.static_field_should_be_camel_case.symbols = static_field
dotnet_naming_rule.static_field_should_be_camel_case.style = camel_case

dotnet_naming_rule.private_or_internal_field_should_be_camel_case.severity = warning
dotnet_naming_rule.private_or_internal_field_should_be_camel_case.symbols = private_or_internal_field
dotnet_naming_rule.private_or_internal_field_should_be_camel_case.style = camel_case

# Edit: changed from pascal case to camel case
dotnet_naming_rule.private_or_internal_static_field_should_be_camel_case.severity = warning
dotnet_naming_rule.private_or_internal_static_field_should_be_camel_case.symbols = private_or_internal_static_field
dotnet_naming_rule.private_or_internal_static_field_should_be_camel_case.style = camel_case

dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.all_fields_camel_case.symbols = all_fields
dotnet_naming_rule.all_fields_camel_case.style = camel_case
dotnet_naming_rule.all_fields_camel_case.severity = warning

dotnet_naming_rule.const_upper_snake.symbols = const_field
dotnet_naming_rule.const_upper_snake.style = upper_snake
dotnet_naming_rule.const_upper_snake.severity = warning

# Symbol specifications

dotnet_naming_symbols.class.applicable_kinds = class
dotnet_naming_symbols.class.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.class.required_modifiers =

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.struct.applicable_kinds = struct
dotnet_naming_symbols.struct.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.struct.required_modifiers =

dotnet_naming_symbols.enum.applicable_kinds = enum
dotnet_naming_symbols.enum.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enum.required_modifiers =

dotnet_naming_symbols.delegate.applicable_kinds = delegate
dotnet_naming_symbols.delegate.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.delegate.required_modifiers =

dotnet_naming_symbols.method.applicable_kinds = method
dotnet_naming_symbols.method.applicable_accessibilities = public
dotnet_naming_symbols.method.required_modifiers =

dotnet_naming_symbols.private_method.applicable_kinds = method
dotnet_naming_symbols.private_method.applicable_accessibilities = private
dotnet_naming_symbols.private_method.required_modifiers =

dotnet_naming_symbols.abstract_method.applicable_kinds = method
dotnet_naming_symbols.abstract_method.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.abstract_method.required_modifiers = abstract

dotnet_naming_symbols.static_method.applicable_kinds = method
dotnet_naming_symbols.static_method.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.static_method.required_modifiers = static

dotnet_naming_symbols.property.applicable_kinds = property
dotnet_naming_symbols.property.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.property.required_modifiers =

dotnet_naming_symbols.public_or_protected_field.applicable_kinds = field
dotnet_naming_symbols.public_or_protected_field.applicable_accessibilities = public, protected
dotnet_naming_symbols.public_or_protected_field.required_modifiers =

dotnet_naming_symbols.static_field.applicable_kinds = field
dotnet_naming_symbols.static_field.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.static_field.required_modifiers = static

dotnet_naming_symbols.private_or_internal_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_field.required_modifiers =

dotnet_naming_symbols.private_or_internal_static_field.applicable_kinds = field
dotnet_naming_symbols.private_or_internal_static_field.applicable_accessibilities = internal, private, private_protected
dotnet_naming_symbols.private_or_internal_static_field.required_modifiers = static

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.all_fields.applicable_kinds = field
dotnet_naming_symbols.all_fields.applicable_accessibilities = *
dotnet_naming_symbols.all_fields.required_modifiers =

dotnet_naming_symbols.const_field.applicable_kinds = field
dotnet_naming_symbols.const_field.applicable_accessibilities = *
dotnet_naming_symbols.const_field.required_modifiers = const

# Naming styles

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

dotnet_naming_style.upper_snake.capitalization = all_upper
dotnet_naming_style.upper_snake.word_separator = _

dotnet_naming_style.camel_case.capitalization = camel_case
